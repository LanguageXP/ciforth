worddoc({SECURITY},{?TERMINAL},{question_terminal},{--- f},{},{
Perform a test of the terminal keyboard for actuation of the break
key. A true flag indicates actuation.
This definition is installation dependent.},{})

worddoc({},{-TRAILING},{dash_trailing},{addr n1 --- addr n2},{},{
Adjusts the character count forthvar({n1}) of a text string beginning address to
suppress the output of trailing blanks. i.e. the characters at
forthvar({addr+n1}) to forthvar({addr+n2}) are blanks.},{})

worddoc({},{0 1 2 3},{zero},{--- n},{},{
These small numbers are used so often that is is attractive to
define them by name in the dictionary as constants.},{})

worddoc({},{1+},{one_plus},{n1 --- n2},{L1},{
Increment forthvar({n1}) by l.},{})

worddoc({},{2+},{two_plus},{n1 --- n2},{},{
Leave forthcode({n1}) incremented by 2.},{})



worddoc({},{BACK},{back},{addr --},{},{
Calculate the backward branch offset from forthcode({HERE}) to forthvar({addr}) and compile
into the next available dictionary memory address.},{})


worddoc({},{BL},{BL},{--- c},{},{
A constant that leaves the ascii value for "blank".},{})

worddoc({},{BLANKS},{blanks},{addr count --},{},{
Fill an area of memory beginning at forthvar({addr}) with blanks.},{})

worddoc({},{CMOVE},{cmove},{from to count --},{},{
Move the specified quantity of bytes beginning at address from to
address to. The contents of address from is moved first proceeding
toward high memory. Further specification is necessary on word
addressing computers.},{})



worddoc({},{COUNT},{count},{addr1 --- addr2 n},{L0},{
Leave the byte address forthvar({addr2}) and byte count forthvar({n}) of a message text
beginning at address forthvar({addr1}) . It is presumed that the first byte at
forthvar({addr1}) contains the text byte count and the actual text starts with
the second byte.
Typically forthcode({COUNT}) is followed by forthcode({TYPE}) .},{})


worddoc({},{DLITERAL},{dliteral},{d --- d (executing) d --- (compiling) P},{},{
If compiling, compile a stack double number into a literal. Later
execution of the definition containing the literal will push it to
the stack. If executing, the number will remain on the stack.},{})

worddoc({},{DUMP},{dump},{addr n ---},{L0},{
Print the contents of forthvar({n}) memory locations beginning at addr. Both
addresses and contents are shown in the current numeric base.},{})


worddoc({},{ENCLOSE},{enclose},{addr1 c --- addr1 n1 n2 n3},{},{
The text scanning primitive used by forthcode({WORD}) . From the text address
addr1 and an ascii delimiting character forthvar({c}) , is determined the byte
offset to the first non-delimiter character forthvar({n1}) , the offset to the
first delimiter after the text forthvar({n2}) , and the offset to the first
character not included.
This proceedure will not process past an ascii 'null', treating it
as an unconditional delimiter.},{})




worddoc({},{ERASE},{erase},{addr n --},{},{
Clear a region of memory to zero from forthvar({addr}) over forthvar({n}) addresses.},{})

worddoc({},{EXECUTE},{execute},{addr -},{},{
Execute the definition whose code field address is on the stack. The
code field address is also called the compilation address.},{})

worddoc({},{EXPECT},{expect},{addr count ---},{L0},{
Transfer characters from the terminal to address, until a "return"
or the count of characters have been received. One or more nulls are
added at the end of the text.},{})

worddoc({},{FILL},{fill},{addr quan b --},{},{
Fill memory at the address with the specified quantity of bytes forthvar({b}) .},{})

worddoc({},{IN},{in},{--- addr},{L0},{
A user variable containing the byte offset within the current input
text buffer (terminal or disc) from which the next text will be
accepted. forthcode({WORD}) uses and moves the value of forthcode({IN}) .},{})

worddoc({},{INTERPRET},{interpret},{},{},{
The outer text interpreter which sequentially executes or compiles
text from the input stream (terminal or disc) depending on forthcode({STATE}) . If
the word name cannot be found after a search of forthcode({CONTEXT}) and then
forthcode({CURRENT}) it is converted to a number according to the current base.
That also failing, an error message echoing the name with a " ?"
will be given.
Text input will be taken according to the convention for forthcode({WORD}) . If a
decimal point is found as part of a number, a double number value
will be left. The decimal point has no other purpose than to force
this action.},{{NUMBER}})


worddoc({},{KEY},{key},{--- c},{L0},{
Leave the ascii value of the next terminal key struck.},{})


worddoc({},{LIT},{lit},{--- n},{C2,L0},{
Within a colon-definition, forthcode({LIT}) is automatically compiled before each
16 bit literal number encountered in input text. Later execution of
forthcode({LIT}) causes the contents of the next dictionary address to be pushed
to the stack.},{})

worddoc({},{LITERAL},{literal},{n --- (compiling)},{P,C2,L0},{
If compiling, then compile the stack value forthvar({n}) as a 16 bit literal.
This definition is immediate so that it will execute during a colon
definition. The intended use is:
     forthsamp({: xxx    [ calculate ]  LITERAL  ;})
Compilation is suspended for the compile time calculation of a
value.
Compilation is resumed and forthcode({LITERAL}) compiles this value.},{})

worddoc({},{MON},{mon},{},{},{
Exit to the system monitor, leaving a re-entry to Forth, if
possible.},{})

worddoc({},{MOVE},{move},{addr1 addr2 n --},{},{
Move the contents of forthvar({n}) memory cells (l6 bit contents) beginning at
forthvar({addr1}) into forthvar({n}) cells beginning at forthvar({addr2}) .
The contents of forthvar({addr1}) is moved first.
This definition is appropriate on on word addressing computers.},{})

worddoc({},{NEXT},{next},{},{},{
This is the inner interpreter that uses the interpretive pointer forthvar({IP}) 
to execute compiled Forth definitions. It is not directly executed
but is the return point for all code proceedures. It acts by
fetching the address pointed by forthvar({IP}) , storing this value in register
forthvar({W}) . It then jumps to the address pointed to by the address pointed to
by forthvar({W}) . forthvar({W}) points to the code field of a definition which contains
the address of the code which executes for that definition.
This usage of indirect threaded code is a major contributor to the
power, portability, and extensibility of Forth. Locations of forthvar({IP}) and
forthvar({W}) are computer specific.},{})

worddoc({},{OFFSET},{offset},{--- addr},{U},{
A user variable which may contain a block offset to disc drives. The
contents of forthcode({OFFSET}) is added to the stack number by forthcode({BLOCK}) . Messages
by forthcode({MESSAGE}) are independent of forthcode({OFFSET}) .},
{{BLOCK} ,{DR0} ,{DR1},{MESSAGE} })

worddoc({},{POP},{pop},{},{},{
The code sequence to remove a stack value and return to forthcode({NEXT}) . forthcode({POP}) is
not directly executable, but is a Forth re-entry point after machine
code.},{})

worddoc({},{PUSH},{push},{},{},{
This code sequence pushes machine registers to the computation stack
and returns to forthcode({NEXT}) . It is not directly executable, but is a Forth
re-entry point after machine code.},{})


worddoc({},{PUT},{put},{},{},{
This code sequence stores machine register contents over the topmost
computation stack value and returns to forthcode({NEXT}) . It is not directly
executable, but is a Forth re-entry point after machine code.},{})


worddoc({},{QUERY},{query},{},{},{
Input 80 characters of text (or until a "return") from the operators
terminal. Text is positioned at the address contained in forthcode({TIB}) with forthcode({IN})
set to zero.},{})


worddoc({},{QUIT},{quit},{},{},{
Clear the return stack, stop compilation, and return control to the
operators terminal. No message is given.},{})

worddoc({},{R#},{r_hash},{--- addr},{U},{
A user variable which may contain the location of an editing cursor,
or other file related function.},{})


worddoc({},{STATE},{state},{--- addr},{L0,U},{
A user variable containing the compilation state. A non-zero value
indicates compilation. The value itself may be implementation
dependent.},{})

worddoc({},{TASK},{task},{},{},{
A no-operation word which can mark the boundary between
applications.
By forgetting forthcode({TASK}) and re-compiling, an application can be discarded
in its entirety.},{})

worddoc({},{THEN},{then},{},{P,CO,L O},{
An alias for forthcode({ENDIF}) .},{})

worddoc({},{TIB},{t_i_b},{--- addr},{U},{
A user variable containing the address of the terminal input buffer.},{})

worddoc({},{VLIST},{vlist},{},{},{
List the names of the definitions in the context vocabulary. "Break"
will terminate the listing.},{})


worddoc({},{WORD},{word},{c ---},{L0},{
Read the next text characters from the input stream being
interpreted, until a delimiter forthvar({c}) is found, storing the packed
character string beginning at the dictionary buffer forthcode({HERE}) . forthcode({WORD}) 
leaves the character count in the first byte, the characters, and
ends with two or more blanks. Leading occurrences of forthvar({c}) are ignored.
If forthcode({BLK}) is zero text is taken from the terminal input buffer,
otherwise from the disc block stored in forthcode({BLK}) .},
{{BLK} ,{IN}})


worddoc({},{X},{x},{},{},{
This is pseudonym for the "null" or dictionary entry for a name of
one character of ascii null. It is the execution proceedure to
terminate interpretation of a line of text from the terminal or
within a disc buffer, as both buffers always have a null at the
end.},{})

worddoc({},{[},{left_bracket},{},{P,L1},{
Used in a colon-definition in form:
forthexample({:  xxx    [  words   ]    more   ;})
Suspend compilation. The words after forthcode({[}) are executed, not compiled.
This allows calculation or compilation exceptions before resuming
compilation with forthcode({]})},{{LITERAL} ,{]}})

worddoc({},{]},{righ_bracket},{},{L1},{
Resume compilation, to the completion of a colon-definition.},
{{[}})

------
This glossary contains all of the word definitions in Release 1 of

fig-FORTH. The definitions are presented in the order of their ascii sort.
Dated: 1979-MAY.
Copyright: See DISTRIBUTION in figdoc.txt 
OCER-ed by Albert van der Horst DFW The Netherlands 2000-MAR

The first line of each entry shows a symbolic description of the action of
the proceedure on the parameter stack. The symbols indicate the order in
which input parameters have been placed on the stack. Three dashes "---"
indicate the execution point; any parameters left on the stack are listed.
In this notation, the top of the stack is to the right.


The symbols include:

addr   memory address
b      8 bit byte (i.e. hi 8 bits zero)
c      7 bit ascii character (hi 9 bits zero)
d      32 bit signed double integer: most significant portion with sign
on top of stack.
f      boolean flag. 0=false, non-zero=true
ff     boolean false flag=0
n      16 bit signed integer number
u      16 bit unsigned integer
tf     boolean true flag=non-zero

The capital letters on the right show definition characteristics:

C      May only be used within a colon definition. A digit indicates number
  of memory addresses used, if other than one.
E      Intended for execution only.
L0     Level Zero definition of FORTH-78
L1     Level One definition of FORTH-78
P      Has precedence bit set. Will execute even when compiling.
U      A user variable.


Unless otherwise noted, all references to numbers are for 16 bit signed
integers. On 8 bit data bus computers, the high byte of a number is on top
of the stack, with the sign in the leftmost bit. For 32 bit signed double
numbers, the most significant part (with the sign) is on top.

All arithmetic is implicitly 16 bit signed integer math, with error and
under-flow indication unspecified.



-- present but not documented
FLUSH CURRENT 2DUP RP@ U.
-- documented but not present 
worddoc({STORAGE},{BLOCK-READ},{block_read},{},{},{
These is the preferred name for the installation dependent code to
read one block to the disc.},{{BLOCK}})

worddoc({STORAGE},{BLOCK-WRITE},{block_write},{},{},{
These is the preferred names for the installation dependent code to
write one block to the disc.},{{BLOCK}})

worddoc({},{DLIST},{d_list},{},{},{
List the names of the dictionary entries in the forthcode({CONTEXT}) vocabulary.},{})

worddoc({},{DR0 DR1},{d_r_zero},{},{},{
Installation dependent commands to select disc drives, by presetting
forthcode({OFFSET}) . The contents of forthcode({OFFSET}) is added to the block number in forthcode({BLOCK})
to allow for this selection. Offset is suppressed for error text so
that is may always originate from drive 0.
No longer true. Is dismissed.},{})

---- DOesn/t belong in dictionary
The high-order l6 bits are most accessable on the stack. 
The new word is created in the forthcode({CURRENT}) vocabulary.
----- not true
Altering OUT to influence formatting
