\input texinfo
@setfilename thisfilename
dnl @smallbook
@afourpaper
@settitle ciforth manual
@setchapternewpage odd

@titlepage
@title ciforth manual
A close-to-ISO/common intel/computer intelligence/CH+ forth.

This is a standard-ISO Forth
for the configuration:
forthitemize
forthitem
version ci86gnrversion
forthitem
_BITS_-bits _REAL_({real mode })_PROTECTED_({protected mode })
forthitem
_BOOTED_({standalone })_HOSTED_LINUX_({running under Linux })_HOSTED_MSDOS_({running under MSDOS
forthitem
_CLASSIC_({with classic figforth I/O })_MODERN_({with modern MSDOS I/O })_USEBIOS_({Using the BIOS for I/O })
})
_BOOTED_({ _RESPECTDOS_({It tries to keep bootfloppy's in MSDOS-compatible format})})
_FEWBLOCKS_({forthitem
number of blocks limited to 256})
_SECURITY_({forthitem
contains security words })
_LOAD_({forthitem
kernel contains the full ISO CORE set})
_SOURCEFIELD_({forthitem
headers with source fields})

forthenditemize

@author Albert van der Horst
Dutch Forth Workshop


@page
@c @vskip Opt plus 1fill
Copyright @copyright{{}} 2000 Dutch Forth Workshop

Permission is granted to copy with attribution.
Program is protected by the GNU Public License.
@end titlepage

dnl
dnl @ifinfo
dnl example of stuff that only appears in info
dnl @end ifinfo
dnl @iftex
dnl example of stuff that only appears in tex
dnl @end iftex
@page
@node Top, Gentle Introduction, Glossary,
@chapter Overview
Forth is an interactive programming system.
ciforth is a
Forth that can be generated in many different version
for many different operation systems.
It is sufficiently close to the ISO standard to run most programs intended
to be portable. It deviates where less used features where
objectionable to implement forthcref({Portability})

This file documents what you as a user needs to know for using this
particular version of ciforth once it is installed on your system.

ciforth consists of three files:
forthitemize
forthitem
_BOOTED_({A booting floppy or hard disk}) dnl
_HOSTED_DPMI_({ciforth.com})_HOSTED_MSDOS_({ciforth.com})dnl
_LINUX_N_({lina})_LINUX_C_({ciforthc})  : the program
_BOOTED_({_RESPECTDOS_({If you inspect a booting floppy from MSDOS you discover that you can
see the  files forth.com and ciforth.blk. You can even start the program from MSDOS})})
forthitem
ciforth.ps ciforth.html : the documentation
forthitem
forth.lab: source library for auxiliary programs
forthenditemize

These files are generated together by the generic system fig86.gnr.
The documentation only applies to the ciforth with which it goes.

If your Forth doesn't fit the description below get a new version.
The information below allows an expert to reconstruct how to
generate a corresponding version. _VERBOSE_({Not all of it may make
sense to you. Tell him whether you want to
fit the Forth to the description or vice versa.}).
forthpxref({Rationale & legalese})

These are the features:

_PROTECTED_({It is running in protected mode.}) dnl
_REAL_({It is running in real mode.}) dnl
_BOOTED_({It is a standalone Forth.}) dnl
_BOOTHD_({It is booting directly from a hard disk.}) dnl
_BOOTSECTRK_({Booting from harddisk or floppy uses classical disk
access by sector and track.}) dnl
_BOOTLBA_({Booting from harddisk uses LBA disk access.})
_HOSTED_LINUX_({It is running under Linux.}) dnl
_HOSTED_MSDOS_({It is running under MSDOS.}) dnl
_HOSTED_DPMI_({It is running under DPMI (OS/2 or MS-Windows).}) dnl
_USEBIOS_({It is using BIOS for I/O, so no redirection of I/O is possible.}) dnl
_RWHD_({Blocks are on a raw hard disk.}) dnl
_RWFD_({Blocks are on a raw floppy disk.}) dnl
_RWFILE_({Blocks are allocated in files.}) dnl
_CLASSIC_({It relies partly on DOS for I/O, partly on the BIOS.}) dnl
_MODERN_({It uses DOS for I/O, and uses no obsolete MSDOS features.}) dnl
_BITS16_({A number has a precision of 16 bits.}) dnl
_BITS32_({A number has a precision of 32 bits.}) dnl
_LINUX_C_({It uses C-routines for I/O.}) dnl
_LINUX_N_({It calls linux system from Forth directly.}) dnl
_SECURITY_({It has compiler security, sacrificing some bizarre ISO
compatibity.}) dnl
_CIF_IN_({It doesn't use forthcode({>IN}) exactly in the way prescribed by ISO.}) dnl
_ISO_IN_({It uses forthcode({>IN}) in the way prescribed by ISO.}) dnl
_FEWBLOCKS_({The number of blocks limited to 256.}) dnl
_LOAD_({It contains the full ISO CORE in the kernel,
more than is needed to make it self contained.}) dnl
_SOURCEFIELD_({It contains a field in the header to point to source.}) dnl
It is indirect threaded.

@iftex
If you are new to Forth you may want to read the Gentle Introduction,
otherwise you better skip this. The third chapter most users will not
be interested in.
@end iftex

@menu
* Gentle Introduction:: For newbies to Forth. You don't want to read this.
* Rationale & legalese:: For experts. You don't want to read this.
* Manual::         User manual
_PC_({* Editor::         The full screen editor})dnl
* Assembler::      The assemblers
* Errors::  What means forthsamp({ciforth ERR ###})?
* Documentation::  Some references
* Glossary::       Description of Forth words
* Glossary Index:: Find a Forth words in the glossary
* Forth Word Index:: All references to Forth words
* Concept Index::
dnl* Forth Word Index ::
@end menu

@node Gentle Introduction, Rationale & legalese, top, top
@chapter Gentle introduction
include(intro.mi)

@node Rationale & legalese, Manual, Gentle Introduction, top
@chapter  Rationale & legalese
include(rational.mi)

_HOSTED_LINUX_({
@node Manual, Assembler, Rationale & legalese, top
@chapter Manual
include(manual.mi)

@node Assembler, Errors, Manual, top
})

_PC_({
@node Manual, Editor, Rationale & legalese, top
@chapter Manual
include(manual.mi)

@node Editor, Assembler, Manual, top
@chapter Editor

The editor for editing screens is a very simple screen editor.
For editing files from within ciforth you just use Your Favorite
Editor. forthxref({Integration}).

The editor becomes available after forthsamp({REQUIRE EDITOR})
and is invoked by  forthsamp({<number> EDIT}) or forthcode({E-S})
for the current screen at forthcode({SCR}).

A screen is copied to the video screen. When you exit, what you
see within the blue cadre, is copied back into the screen.

This editor has Wordstar compatible commands.
No function key works, only control keys.


^E ^S ^D ^X <Enter> <Tab> : Cursor up left right down. Next line. Tab.


^A ^F : Cursor word left, right.


^G ^T ^Y : Delete char, word, line.


^Z ^U ^P : Undelete word, line. Undelete line and pop.


^J ^O : Join lines, Open (split) line.


ESC Q / ESC q : quit (abondon edit and do not update.)


ESC x (or whatever) : exit editing, save and update.

Word and line deletes stack at the bottom of the screen.
^P is the only one that pops this stack.


Editing outside of the blue cadre allows useful tricks.
Small sequences perform useful actions:


swap lines ^Y ^E ^P.


delete line without stacking <ret> ^E ^J ^O

@node Assembler, Errors, Editor, top
})
@chapter Assembler
include(assembler.mi)

@node Errors, Documentation, Assembler, top
@chapter  Errors
Errors are identified by a number.
_VERBOSE_({Of course the error numbers are given in decimal, always.})
Preferably in
addition to the number a mnemonic messages is displayed.
But this is not always possible, such is the nature of error
situations.
If in the following an explanation is missing, this means that the
error is given for reference only; the error cannot be generated
by your ciforth. For example for a version without
security you will never see error 1. If it says ``not used'', this
means it is not used by any ciforth.
You may issue errors yourself at your discretion using
forthcode({THROW}) or, preferably, forthcode({?ERROR}) and use
an error number with an applicable message.

The errors whose message starts with forthsamp({AS:}) are used by the PostIt FixUp assembler
in the file forthfile({asgen.frt}) . forthxpref({Assembler Errors})

_HOSTED_({Negative error numbers are those reported by
_PC_({MSDOS})_HOSTED_LINUX_({Linux}). If possible, error
messages are shown. But no explanation of the error is
available.
_PC_({MSDOS error numbers are given here in decimal, while in some documentation
they are given as hex numbers.})
}).

forthitemize
forthitem
forthsamp({ERR # 1 : EMPTY STACK})

_SECURITY_({ The stack has underflowed. This is detected by
forthcode({?STACK}) at several places, in particular in
forthcode({INTERPRET}) after each word interpreted or compiled.
There is ample slack, but malicious intent can crash the system
before this is detected. },{dnl})_END_({_SECURITY_})

forthitem
 forthsamp({ERR # 2 : DICTIONARY FULL})

Not used.

forthitem
forthsamp({ERR # 3 : FIRST ARGUMENT MUST BE OPTION})

_HOSTED_({
If you pass arguments to ciforth, your first argument must be
an option (such as -a), otherwise it doesn't know what to
do with it.})

forthitem
 forthsamp({ERR # 4 : ISN'T UNIQUE})

Not being unique is not so much an error as a warning. The word
printed is the latest defined. It was already in the current
search order.

forthitem
 forthsamp({ERR # 5 : EMPTY NAME FOR NEW DEFINITION})

An attempt is made to define a new word with an empty string
for a name. This is detected by forthcode({(CREATE)}) .
All forthdefi({defining}) word can return this message. It is
typically caused by using such a word at the end of a line.

forthitem
forthsamp({ERR # 6 : DISK RANGE ?})

Reading to the terminal input buffer failed. The message is
probably inappropiate.

forthitem
forthsamp({ERR # 7 : FULL STACK})

_SECURITY_({ The stack has run into the dictionary. This can be
caused by pushing too many items, but usually it must be
interpreted as dictionary full. If you have enough room, you
have passed a wrong value to forthcode({ALLOT}) . This is
detected at several places, in particular in
forthcode({INTERPRET}) after each word interpreted.
},{dnl})_END_({_SECURITY_})

forthitem
 forthsamp({ERR # 8 : DISC ERROR !})

An access to the Library Accessible by Block (screen aka block
file) has failed. This is detected by
forthcode({?DISK-ERROR}) called from places where
a disk access has occurred. It may be that the library file has
not been properly installed. Check the content of
forthcode({BLOCK-FILE}) . You may not have the right to access
it. Try to view the file. Normally the library file is opened
read-only. If you want to edit it make sure to do
forthcode({DEVELOP}) in order to reopen it in read/write mode.
If you forget, you get this message too.

forthitem
 forthsamp({ERR # 9 : UNRESOLVED FORWARD REFERENCE})

Not used.

forthitem
 forthsamp({ERR # 10 : NOT A WORD, NOR A NUMBER OR OTHER DENOTATION})

The string printed was not found in the dictionary as such,
but its first part matches a forthdefi({denotation}) .
The denotation word however rejected it as not properly formed.
An example of this is a number containing some non-digit
character, or the character denotation forthcode({&}) followed by more
than one character. It may also be a miss-spelled word that
looks like a number, e.g. forthsamp({25WAP}) .
Be aware that denotations may mask regular words.
If the forthcode({DENOTATION}) vocabulary is on top of the search order,
you get this message if you type forthcode({2SWAP}) .

forthitem
 forthsamp({ERR # 11 : WORD IS NOT FOUND})

The string printed was not found in the dictionary.
This error is detected by forthcode({'}) (tick).

forthitem
 forthsamp({ERR # 12 : NOT RECOGNIZED})

The string printed was not found in the dictionary, nor
does it match a number, or some other denotation.

forthitem
 forthsamp({ERR # 13 : ERROR, NO FURTHER INFORMATION})

This error is used temporily, whenever there is need for
an error message but there is not yet one assigned.

forthitem
 forthsamp({ERR # 14 : SAVE/RESTORE MUST RUN FROM FLOPPY})

_BOOTLBA_({
If the library is saved to or restored from
floppy this must be done in a Forth that boots from floppy.})

forthitem
 forthsamp({ERR # 15 : CANNOT FIND WORD TO BE POSTPONED})

Not used.

forthitem
forthsamp({ERR # 16 : (this error messages is not in use)})

forthitem
forthsamp({ERR # 17 : COMPILATION ONLY, USE IN DEFINITION})

_SECURITY_({
This error is reported by forthcode({?COMP}). You try to use a
word that doesn't work properly in interpret mode. This mostly
refers to control words like forthcode({IF}) and forthcode({DO}) .
_VERBOSE_({If you want control words to work in interpret mode,
require forthcode({NEW-IF}) .})
})

forthitem
forthsamp({ERR # 18 : EXECUTION ONLY})
_SECURITY_({
This error is reported by forthcode({?EXEC.}). You try to use a
word that doesn't work properly in compile mode. You will not
see this error, because all words in ciforth do.
})

forthitem
 forthsamp({ERR # 19 : CONDITIONALS NOT PAIRED})

_SECURITY_({
This error is reported by forthcode({?PAIRS}). You try to
improperly use control words that pair up (like forthcode({IF}) and
forthcode({THEN}) , or forthcode({DO}) and forthcode({LOOP}) )
})

forthitem
forthsamp({ERR # 20 : DEFINITION NOT FINISHED})

_SECURITY_({
This error is reported by forthcode({?CSP}). It detects
stack unbalance between forthcode({:}) and forthcode({;}) .
This means there is an error in the compiled code.
It happens also if you try to use data that is put on the stack before
 forthcode({:}) during compilation.
Instead of

forthsamp({<generatedata> : name LITERAL .... ;})

use

forthsamp({<generatedata> : name [ _ SWAP ] LITERAL .... ; DROP})

to keep the stack at the same depth.
})

forthitem
forthsamp({ERR # 21 : IN PROTECTED DICTIONARY})

The word you are trying to forthcode({FORGET}) is below the forthcode({FENCE}) ,
such that forgetting is not allowed.

forthitem
forthsamp({ERR # 22 : USE ONLY WHEN LOADING})

_SECURITY_({
This error is reported by forthcode({?LOAD}). You try to use a
word that only works while loading from the forthcode({BLOCK-FILE}) ,
in casu forthcode({-->}) .
})

forthitem
forthsamp({ERR # 23 : OFF CURRENT EDITING SCREEN})

forthitem
 forthsamp({ERR # 24 : DECLARE VOCABULARY})

forthitem
 forthsamp({ERR # 25 : LIST EXPECTS DECIMAL})

This message is used by a redefined forthcode({LIST}) , to prevent
getting the wrong screen.

forthenditemize

@node Documentation,Glossary,Errors,top
@chapter  Documentation summary

This is copied from the FIG documentation 1978.
It is probably out of date now.

The following manuals are in print:

Caltech FORTH Manual, an advanced manual with internal details of Forth. Has
Some implementation peculiarities. Approx. $6.50 from the Caltech Book
Store, Pasadena, CA.

Kitt Peak Forth Primer, $20.00 postpaid from the Forth Interest Group, P. O.
Box 1105, San Carlos, CA 94070.

microFORTH Primer, $15.00 Forth, Inc.
815 Manhattan Ave. Manhattan Beach, CA 90266


Forth Dimensions, newsletter of the Forth Interest Group, $5.00 for 6 issues
including membership. F-I-G. P.O. Box 1105, San Carlos, CA. 94070

@node Glossary,top,Documentation,top
@chapter Glossary
Wherever it says
single precision number or forthdefi({cell}) _BITS_ bits is meant.
Wherever it says
 forthdefi({double}) or ``double precision number'' a
_BITS16_({32})_BITS32_({64}) bits number is meant.

The first line of each entry shows a symbolic description of the action of
the proceedure on the parameter stack. The symbols indicate the order in
which input parameters have been placed on the stack. The dashes "---"
indicate the execution point; any parameters left on the stack are listed.
In this notation, the top of the stack is to the right.

The symbols include:

@table @samp
forthitem addr
memory address
forthitem b
8 bit byte (i.e. hi 8 bits zero)
forthitem c
7 bit ascii character (hi 9 bits zero)
forthitem d
_BITS16_({32})_BITS32_({64}) bit signed double integer: most significant portion with sign
on top of stack.
forthitem f
boolean forthdefi({flag}) . 0=false, non-zero=true
forthitem ff
boolean false flag=0
forthitem n
_BITS_ bit signed integer number
forthitem u
_BITS_ bit unsigned integer
forthitem sc
A string constant, i.e. two cells, an address and a length.
Length characters are present at the address.
_VERBOSE_({They must not be changed.})
forthitem tf
boolean true flag=non-zero
@end table

The capital letters on the right show definition characteristics:

@table @samp
forthitem B
The word is available only after loading from background storage
forthitem C
May only be used within a colon definition. A digit indicates number
of memory addresses used, if other than one.
forthitem E
Intended for execution only.
forthitem FIG
Belongs to the FIG model
forthitem I
Has immediate bit set. Will execute even when compiling.
forthitem ISO
Belongs to ISO standard
forthitem L0
Level Zero definition of FORTH-78
forthitem L1
Level One definition of FORTH-78
forthitem NISO
Word belongs to ISO standard, but the implementation is not
quite conforming.
forthitem U
A user variable.
@end table

Where there is mention of a standard or a model,
it means that the word actually complies to the standard or the model,
not that some word of that name is present.
_VERBOSE_({Words marked with forthsamp({ISO,FIG,L0}) will behave identically
over all but the whole spectra of Forth's.})

Unless otherwise noted, all references to numbers are for _BITS_ bit
signed integers. For _BITS16_({32})_BITS32_({64}) signed numbers, the
most significant part (with the sign) is on top.

All arithmetic is implicitly _BITS_ bit signed integer math, with error and
under-flow indication unspecified.

include(menu.texinfo)
undefine({W})
include(wordset.mi)

@node Glossary Index,,,Top
@unnumbered Glossary Index
This index finds the glossary description of each word.
@printindex pg
@node Forth Word Index,,,Top
@unnumbered Forth Word Index
This index contains @emph{{all}} references to a word.
Use the glossary index to find the glossary description of each word.
@printindex fn
@node Concept Index,,,Top
@unnumbered Concept Index
The first reference is where the concept is explained.
@printindex cp
@summarycontents
@contents
@bye
