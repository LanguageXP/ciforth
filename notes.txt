The following had to be done in order to change 
the listing of FIG86 for NASM.

1. Got rid of most of the useless MASM directives
by redefining them as empty macros.
2. Others where commented out by hand: PAGE ENDP
3. comment ~ /~
   was replaced by
   %if 0 / %endif
4. NASM doesn't allow labels that duplicate instruction
   names, so renames: CLD -> LCLD, AT -> FETCH, LEAVE -> LLEAV
   CMOVE -> LCMOVE
5. Did by hand the real differences i.e. square brackets
   around memory references.

This version is marked in RCS as SANSHEADER

The following had to be done to make a generic listing
1. define generic comment introducer etc. and define
it for both assemblers
2. Leave the renames thatavoid duplication with instructions.
3. Tweak instructions that behave differently, e.g.
define _BYTE as BYTE on NASM and as nought on MASM.
4. define GENERIC header handling.
The following macro helped to generate the proper header.
\E3=ssp"^[A-Z][A-Z0-9]*"sdfesn dew ufl
\E2=solimf txt' ' gtc"9" imn txt"HEADER({"eoltxt"},{" max ssp"^[A-Z][A-Z0-9]*"sdfesn gtc"16" ete sol dew ufl mae gmx ufl eol txt"},{})"clecle unl ssp"^;[^ ][^ ]*$" cdo mas dml
\E1=ssp"^;[^ ][^ ]*$"

Get rid of the OFFSET related to branching.
\E4=cdo gtc"9" dew dew dew imf txt"_0BRANCH(" ((("99"cridec)))ufl eol txt")"

This version is marked in RCS as HEADERMACROS
It is still FIGFORTH IBM 1.0.0 because the executable is not changed a bit.

The following is done but is is called version 2.0.0 
This is still FIGFORTH, but
1. in line with ANSI the buffer length is made equal to the screen length.
2. the blocks are allocated in a disk file, using non-obsolete disk i/o.
3. the stuff related to having two drives is removed, also the mess
with printing.
4. an explicit BDOS (and BIOS) word is introduced
and where opportune the terminal I/O and other I/O uses these
word.
5. the I/O relying on MSDOS is surrounded with conditional assembly, such
that it can be replaced easily.

Next step :
The previous version is called FIGFORTH for MSDOS.
With conditional compilation one can get FIGFORTH for PC,
which is stand alone.

The label UNCHANGEDBUTMOVED is hung of all sources that
are reorganised to have all dependant stuff together.
That is conditionally put in for _USEDOS_1_
We can now plug in for the conditional part the 
_USEBIOS_1_ stuff.

The label MSDOSBIOS marks a clean version that supports the 
choise between MSDOS and BIOS. These cleanups resulted in the
removal of the printer stuff, but in BIOS there is no
CR send with each LF.

There is now choice between HOSTED and BOOTED.
I introduced the convention to use the prefix L for any labels that would
interfere with assembly key words (notably instructions like CLD OR XOR AND
SUB). Unlike the duplicating convention (AND ->ANDD) there is nowhere need for
exceptions. I also use FET for @ instead of AT. This also works out more
nicely. 

The MODERN set is an alternative I/O to MSDOS or BIOS. It is based
on MSDOS, but no features marked obsolete are used.
The version of ?TERMINAL is now the same as KEY? in ANSI.
(Previously it was not, it ate the key pressed.).
Although Bill says they are obsolete, it is not possible to
make a reasonable KEY with the file I/O functin 3f and 40.
(You would to have press <Enter> after each key or switch
back and forth modes, which would require a terrible amount
of experimenting because, the "ultimate reference" 
MSDOS programmers reference guide only offers the information
like bit 5 means binary.) (Compared to that using DEBUG
with IBM's own documentation of version 3.20 is a luxury.)

It is possible to create a bootable MSDOS readable floppy from
Linux alone using the m(dir copy format ..) tools from GNU.
For this purpose the characteristics of the floppy wanted
must be set up in the source. Furthermore the Makefile
assumes a 3" floppy drive as /dev/fd0. This will cover
over 90% of all systems. 

MODERN :
By writing a block past the end of file the block system is extended.
This is a feature, not a bug.

MODERN: and USEBIOS:
The offset is used to screen off a part of the disk, instead of 
changing disks. The old use was based on the assumption that
you have a system with two identical floppy drives (instead of
a hard disk). This is valid for a vanishing number
of systems nowaday's of course. The meaning of R/W has shifted
towards the physical access, where the BLOCK means logical access.
This is not done in USEDOS, because that is the original FIGFORTH
way.

USEBIOS WORKS REASONABLY now. However if you have once addressed outside
of the the disk (say 1500 LIST) you cannot recover (unless probably, 
you do an init of the disk again.). yes 0 0 0 0 13 BIOS
This definition is put into screen 100 the utilities screen.
Some programs of old have been run, such as the elaborate sieve.

MASM cannot assemble the current source probably, because
there is a quirk in NASM to be able to use absolute addresses,
such as needed in creating an offset.

2.22 OFFSET in its present form must be eleminated from MESSAGE
Done
2.23 booting from hard disk possible.
BOOTED option splitted between BOOTHD and BOOTFD.
There are now two version possible for booting.
SMALL can be removed. (better use MODE 0 0 0 13H BIOS )
8 LOAD gives an elaborate system with editor and assembler.
2.24 Got to remove SMALL and for BOOTHD change R/W.

2.27 Preparations to make a 32/16 switch, like DC
The executable is not changed from 2.26.
This version is marked LASTBEFOREPROTECTED. (allthough it turns out there
is much more to do before we go protected.

2.28 

2.29
+ORIGIN is from now on associated with the initial values for the user
variables, not with some vague origin of the program.
So 0 +origin tells you were this area starts.
