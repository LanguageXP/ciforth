A Forth system is a database of small programs.
The database is called the dictionary.
The programs are called words, or definitions.
The explanation of words from the dictionary is called
a glossary.

Like in a Disk Operating System a program is executed
by typing its name, but unlike in a DOS several programs
can be specified on the same line, interspersed with
numbers. Also names can be anything, as long as they don't 
contain spaces. 

A program may leave one or more 
results, and the next program can use it. 
The latest result is used up first, hence the name lifo buffer.
(last in, first out).

For example:

forthsamp({1 2 + 7 * 

OK

.

21 OK
})


1 2 and 7 are numbers and are just remembered as they are typed in. 
'10 OK' is the answer of the computer.
forthcode(+) is a small program with an appropriate name.
It adds the two numbers that were entered the latest, in this
case 1 and 2. The result 3 remains, but 1 and 2 are consumed.
The program forthcode(*) adds the 2 and the 7 and the result is 10.
The program forthcode(.) prints this results. It could have
been put on the same line equallt easily.

Programs can be added to the database by special programs: the so
called defining words. A defining word generally gets the name of the
new word from the input stream. 

For example: a constant is just a program that leaves always 
the same value.

A constant is created in this way, by the defining word forthcode({CONSTANT}) :

forthsamp({127 CONSTANT MONKEY   12 .

12 OK})

This must not be read like:

 a number, two programs and again a number etc.... , 

but as:

a number, a program and a name that is consumed, and after that

life goes on. The forthsamp({12 .}) we put there for demonstration purposes,
to show that forthcode({CONSTANT}) reads ahead only one word.
We see that forthcode({CONSTANT}) like any other program consumes some 
data, in this case the 127 that serves as an initial value for 
the constant called  forthvar({MONKEY}) .

A very important defining word is forthcode({:}), with its closure 
forthcode({;}).

forthsamp({: TEST 1 2 + 7 * ;     12 . 

12 OK })


In this case not only the name forthvar({TEST}) is consumed, but none of the remaining
numbers and programs are executed. 
Instead they form a specification of what forthvar({TEST}) must do.
After the semicolon life continues as usual.

forthsamp({TEST TEST + .

42 OK})

We see that forthvar({TEST}) behaves as a shorthand for the line up till
the semi colon, and that in its turn it can be used as a building
block.

The colon allows the Forth programmer to add new programs 
easily and test them easily, by typing them at the keyboard.
It is considered bad style if a program is longer than 
a couple of lines. 
Indeed the inventor of Forth Chuck Moore has written splendid
applications with an average program length of about one line.
Cathedrals were built by laying stone upon stone, 
never carved out of one rock.

The implementation of the language Forth you look at is very old
fashioned, but simple. You as a user have to deal with only three
parts/files : this documentation, the executable program, and the
screen file, a heap of small programs in source form. 

There is an ISO standard for Forth and this Forth doesn't
comply to it. Still by restricting yourself to the definitions marked
as ISO in the glossary, it is quite possible to write an application
that will run on any ISO-compliant system. 


